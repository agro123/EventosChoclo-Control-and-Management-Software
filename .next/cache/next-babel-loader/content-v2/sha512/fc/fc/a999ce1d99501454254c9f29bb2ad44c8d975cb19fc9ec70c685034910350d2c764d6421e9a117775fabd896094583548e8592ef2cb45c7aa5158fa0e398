{"ast":null,"code":"import pool from \"../../../lib/bd\";\nimport nextConnect from 'next-connect';\n\nconst multer = require('multer');\n\nconst fs = require('fs');\n\nconst diskStorage = multer.diskStorage({\n  destination: './imagenes',\n  filename: (req, file, cb) => {\n    cb(null, `${Date.now()}-${file.originalname}`);\n  }\n});\nconst fileUpLoad = multer({\n  storage: diskStorage\n});\nconst apiRoute = nextConnect({\n  onError(error, req, res) {\n    res.status(501).json({\n      error: `¡Lo siento, sucedió algo! ${error.message}`\n    });\n  },\n\n  onNoMatch(req, res) {\n    res.status(405).json({\n      error: `Metodo '${req.method}' no valido`\n    });\n  }\n\n});\napiRoute.get(async (req, res) => {\n  const evento = await pool.query('SELECT * FROM imagenes');\n  res.status(200).json(evento.rows);\n});\napiRoute.use(fileUpLoad.single('image'));\napiRoute.post(async (req, res) => {\n  const {\n    file\n  } = req;\n  const nom_imagen = file.originalname;\n  const tipo = file.mimetype;\n  const datos = fs.readFileSync(`./imagenes/${file.filename}`);\n  console.log(datos);\n  const response = await pool.query(`INSERT INTO imagenes (nom_imagen, tipo, datos)\n      VALUES($1, $2, $3) returning id_imagen`, [nom_imagen, tipo, datos]);\n  res.status(200).json(response.rows[0]);\n});\nexport default apiRoute;\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};","map":{"version":3,"sources":["C:/Users/crist/Documents/ds2/EventosChoclo-Control-and-Management-Software/pages/api/imagen/index.js"],"names":["pool","nextConnect","multer","require","fs","diskStorage","destination","filename","req","file","cb","Date","now","originalname","fileUpLoad","storage","apiRoute","onError","error","res","status","json","message","onNoMatch","method","get","evento","query","rows","use","single","post","nom_imagen","tipo","mimetype","datos","readFileSync","console","log","response","config","api","bodyParser"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,iBAAjB;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAME,WAAW,GAAGH,MAAM,CAACG,WAAP,CAAmB;AACrCC,EAAAA,WAAW,EAAE,YADwB;AAErCC,EAAAA,QAAQ,EAAE,CAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,KAAmB;AAC3BA,IAAAA,EAAE,CAAC,IAAD,EAAQ,GAAEC,IAAI,CAACC,GAAL,EAAW,IAAGH,IAAI,CAACI,YAAa,EAA1C,CAAF;AACD;AAJoC,CAAnB,CAApB;AAOA,MAAMC,UAAU,GAAGZ,MAAM,CAAC;AACxBa,EAAAA,OAAO,EAAEV;AADe,CAAD,CAAzB;AAIA,MAAMW,QAAQ,GAAGf,WAAW,CAAC;AAC3BgB,EAAAA,OAAO,CAACC,KAAD,EAAQV,GAAR,EAAaW,GAAb,EAAkB;AACvBA,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEH,MAAAA,KAAK,EAAG,6BAA4BA,KAAK,CAACI,OAAQ;AAApD,KAArB;AACD,GAH0B;;AAI3BC,EAAAA,SAAS,CAACf,GAAD,EAAMW,GAAN,EAAW;AAClBA,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEH,MAAAA,KAAK,EAAG,WAAUV,GAAG,CAACgB,MAAO;AAA/B,KAArB;AACD;;AAN0B,CAAD,CAA5B;AASAR,QAAQ,CAACS,GAAT,CAAa,OAAOjB,GAAP,EAAYW,GAAZ,KAAoB;AAC/B,QAAMO,MAAM,GAAG,MAAM1B,IAAI,CAAC2B,KAAL,CAAW,wBAAX,CAArB;AACAR,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBK,MAAM,CAACE,IAA5B;AACD,CAHD;AAKAZ,QAAQ,CAACa,GAAT,CAAaf,UAAU,CAACgB,MAAX,CAAkB,OAAlB,CAAb;AAEAd,QAAQ,CAACe,IAAT,CAAc,OAAMvB,GAAN,EAAWW,GAAX,KAAmB;AAC/B,QAAM;AAACV,IAAAA;AAAD,MAAUD,GAAhB;AAEA,QAAMwB,UAAU,GAAGvB,IAAI,CAACI,YAAxB;AACA,QAAMoB,IAAI,GAAGxB,IAAI,CAACyB,QAAlB;AACA,QAAMC,KAAK,GAAG/B,EAAE,CAACgC,YAAH,CAAkB,cAAa3B,IAAI,CAACF,QAAS,EAA7C,CAAd;AACA8B,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEA,QAAMI,QAAQ,GAAG,MAAMvC,IAAI,CAAC2B,KAAL,CACpB;AACL,6CAFyB,EAEqB,CAACK,UAAD,EAAaC,IAAb,EAAmBE,KAAnB,CAFrB,CAAvB;AAKAhB,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBkB,QAAQ,CAACX,IAAT,CAAc,CAAd,CAArB;AACD,CAdD;AAiBA,eAAeZ,QAAf;AAGA,OAAO,MAAMwB,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf","sourcesContent":["import pool from \"../../../lib/bd\";\r\nimport nextConnect from 'next-connect'\r\nconst multer = require('multer');\r\nconst fs = require('fs');\r\n\r\nconst diskStorage = multer.diskStorage({\r\n  destination: './imagenes',\r\n  filename: (req, file, cb) => {\r\n    cb(null, `${Date.now()}-${file.originalname}`);\r\n  }\r\n})\r\n\r\nconst fileUpLoad = multer({\r\n  storage: diskStorage,\r\n})\r\n\r\nconst apiRoute = nextConnect({\r\n  onError(error, req, res) {\r\n    res.status(501).json({ error: `¡Lo siento, sucedió algo! ${error.message}` });\r\n  },\r\n  onNoMatch(req, res) {\r\n    res.status(405).json({ error: `Metodo '${req.method}' no valido` });\r\n  },\r\n});\r\n\r\napiRoute.get(async (req, res) => {\r\n  const evento = await pool.query('SELECT * FROM imagenes');\r\n  res.status(200).json(evento.rows);\r\n})\r\n\r\napiRoute.use(fileUpLoad.single('image'));\r\n\r\napiRoute.post(async(req, res) => {\r\n  const {file } = req\r\n\r\n  const nom_imagen = file.originalname;\r\n  const tipo = file.mimetype;\r\n  const datos = fs.readFileSync( `./imagenes/${file.filename}`);\r\n  console.log(datos)\r\n\r\n  const response = await pool.query(\r\n    `INSERT INTO imagenes (nom_imagen, tipo, datos)\r\n      VALUES($1, $2, $3) returning id_imagen`,[nom_imagen, tipo, datos]\r\n  );\r\n\r\n  res.status(200).json(response.rows[0]);\r\n});\r\n\r\n\r\nexport default apiRoute;\r\n\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false,\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}