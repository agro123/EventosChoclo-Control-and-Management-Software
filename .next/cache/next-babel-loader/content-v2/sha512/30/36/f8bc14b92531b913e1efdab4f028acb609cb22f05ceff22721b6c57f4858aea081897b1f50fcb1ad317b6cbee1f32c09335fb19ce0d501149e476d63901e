{"ast":null,"code":"import pool from \"../../../lib/bd\";\nexport default (async (req, res) => {\n  try {\n    const {\n      method,\n      body: {\n        titulo,\n        fecha_inicial,\n        fecha_final,\n        num_boletas,\n        descripcion,\n        lugar,\n        anfitrion,\n        id_imagen,\n        tematica,\n        direccion,\n        aforo\n      }\n    } = req;\n\n    switch (method) {\n      case 'GET':\n        const evento = await pool.query('select * from evento natural join imagenes');\n        res.status(200).json(evento.rows);\n        break;\n\n      case 'POST':\n        await pool.query(`INSERT INTO evento (titulo, fecha_inicial, fecha_final, num_boletas, descrip,\n            lugar, anfitrion, id_imagen, tematica, direccion, aforo)\n            VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)`, [titulo, fecha_inicial, fecha_final, num_boletas, descripcion, lugar, anfitrion, id_imagen, tematica, direccion, aforo]);\n        res.status(200).json(`Se REGISTRO el evento ${titulo}`);\n        break;\n\n      default:\n        res.setHeader('Allow', ['GET', 'POST']);\n        res.status(405).end(`Metodo ${method} Invalido`);\n    }\n  } catch (e) {\n    res.status(e.status || 500).end(e.message);\n  }\n});","map":{"version":3,"sources":["C:/Users/crist/Documents/ds2/EventosChoclo-Control-and-Management-Software/pages/api/evento/index.js"],"names":["pool","req","res","method","body","titulo","fecha_inicial","fecha_final","num_boletas","descripcion","lugar","anfitrion","id_imagen","tematica","direccion","aforo","evento","query","status","json","rows","setHeader","end","e","message"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,iBAAjB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AACF,UAAM;AACJC,MAAAA,MADI;AAEHC,MAAAA,IAAI,EAAE;AAACC,QAAAA,MAAD;AACLC,QAAAA,aADK;AAELC,QAAAA,WAFK;AAGLC,QAAAA,WAHK;AAILC,QAAAA,WAJK;AAKLC,QAAAA,KALK;AAMLC,QAAAA,SANK;AAOLC,QAAAA,SAPK;AAQLC,QAAAA,QARK;AASLC,QAAAA,SATK;AAUPC,QAAAA;AAVO;AAFH,QAaFd,GAbJ;;AAeA,YAAQE,MAAR;AACE,WAAK,KAAL;AACE,cAAMa,MAAM,GAAG,MAAMhB,IAAI,CAACiB,KAAL,CAAW,4CAAX,CAArB;AACAf,QAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,MAAM,CAACI,IAA5B;AACA;;AACF,WAAK,MAAL;AACE,cAAMpB,IAAI,CAACiB,KAAL,CACH;AACX;AACA,iEAHc,EAIF,CACEZ,MADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,WALF,EAMEC,KANF,EAOEC,SAPF,EAQEC,SARF,EASEC,QATF,EAUEC,SAVF,EAWEC,KAXF,CAJE,CAAN;AAiBAb,QAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,yBAAwBd,MAAO,EAArD;AACA;;AACF;AACEH,QAAAA,GAAG,CAACmB,SAAJ,CAAc,OAAd,EAAuB,CAAC,KAAD,EAAQ,MAAR,CAAvB;AACAnB,QAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBI,GAAhB,CAAqB,UAASnB,MAAO,WAArC;AA3BJ;AA6BD,GA7CD,CA6CE,OAAOoB,CAAP,EAAU;AACVrB,IAAAA,GAAG,CAACgB,MAAJ,CAAWK,CAAC,CAACL,MAAF,IAAY,GAAvB,EAA4BI,GAA5B,CAAgCC,CAAC,CAACC,OAAlC;AACD;AACF,CAjDD","sourcesContent":["import pool from \"../../../lib/bd\";\r\n\r\nexport default async (req, res) => {\r\n  try {\r\n    const {\r\n      method,\r\n       body: {titulo,\r\n        fecha_inicial,\r\n        fecha_final,\r\n        num_boletas,\r\n        descripcion,\r\n        lugar,\r\n        anfitrion,\r\n        id_imagen,\r\n        tematica,\r\n        direccion,\r\n      aforo},\r\n    } = req\r\n\r\n    switch (method) {\r\n      case 'GET':\r\n        const evento = await pool.query('select * from evento natural join imagenes');\r\n        res.status(200).json(evento.rows);\r\n        break\r\n      case 'POST':\r\n        await pool.query(\r\n          `INSERT INTO evento (titulo, fecha_inicial, fecha_final, num_boletas, descrip,\r\n            lugar, anfitrion, id_imagen, tematica, direccion, aforo)\r\n            VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)`, \r\n            [\r\n              titulo,\r\n              fecha_inicial,\r\n              fecha_final,\r\n              num_boletas,\r\n              descripcion,\r\n              lugar,\r\n              anfitrion,\r\n              id_imagen,\r\n              tematica,\r\n              direccion,\r\n              aforo]\r\n        );\r\n        res.status(200).json(`Se REGISTRO el evento ${titulo}`);\r\n        break\r\n      default:\r\n        res.setHeader('Allow', ['GET', 'POST'])\r\n        res.status(405).end(`Metodo ${method} Invalido`)\r\n    }\r\n  } catch (e) {\r\n    res.status(e.status || 500).end(e.message)\r\n  }\r\n} \r\n\r\n"]},"metadata":{},"sourceType":"module"}